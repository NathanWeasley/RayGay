
(load "../../scenes/lib/vector-math.scm")
(define test-define-1 10)

; Testing vector math

(define (test-vector-math)
 (test "dot 1" (near-equal? (vdot #(1 2 3) #(4 5 6)) (+ 4 10 18)))
 (test "dot 2" (near-equal? (vdot #(3 -1 2) #(4 5 6)) (+ 12 -5 12)))
; (test "vcross" (near-equal? (vcross #(1 2 3) #(4 5 6)) (sqrt 32)))
 (test "vlength 1" (near-equal? (vlength #(1 2 3)) (sqrt 14)))
 (test "vlength 2" (near-equal? (vlength #(4 -2 2)) (sqrt 24)))
 (test "vscale 1" (near-equal? (vscale #(1 2 3) 2) #(2 4 6)))
 (test "vscale 2" (near-equal? (vscale #(4 -2 2) 3) #(12 -6 6)))
 (test "vplus 1" (near-equal? (v+ #(1 2 3) #(2 5 9)) #(3 7 12)))
 (test "vplus 2" (near-equal? (v+ #(4 -2 2) #(4 5 6)) #(8 3 8)))
 (test "vminus 1" (near-equal? (v- #(1 2 3) #(2 5 9)) #(-1 -3 -6)))
 (test "vminus 2" (near-equal? (v- #(4 -2 2) #(4 5 6)) #(0 -7 -4)))
 (test "translate 1" (near-equal? (translate #(1 1 1) #(1 2 3)) #(2 3 4)))
 (test "translate 2" (near-equal? (translate #(2 2 2) #(-1 -2 -3)) #(1 0 -1)))
 (test "rotate 1" (near-equal? (rotate #(1 0 0) #(0 0 1) 90) #(0 -1 0))) 
 (test "rotate 1" (near-equal? (rotate #(0 1 0) #(0 0 1) 90) #(1 0 0))) 
 (test "1=1" (equal? 2 (+ 1 1))))

(define (test-matrix-math)
 (define I #(#(1 0 0 0) #(0 1 0 0) #(0 0 1 0) #(0 0 0 1)))
 (define I2 #(#(2 0 0 0) #(0 2 0 0) #(0 0 2 0) #(0 0 0 1)))
 (define O #(#(0 0 0 0) #(0 0 0 0) #(0 0 0 0) #(0 0 0 0)))
 (define v1 #(1 1 1))
 (define v123 #(1 2 3))
 (define v246 #(2 4 6))
 (test "I" (near-equal? I identity-matrix))
 (test "(matrix? I)" (matrix? I))
 (test "(matrix? I2)" (matrix? I2))
 (test "I * 2" (near-equal? (scale I #(2 2 2)) I2))
 (test "I * I" (near-equal? I (m* I I)))
 (test "I * O" (near-equal? O (m* O I)))
 (test "v1 * I" (near-equal? v1 (m* v1 I)))
 (test "I * v1" (near-equal? v1 (m* I v1)))
 (test "I * v123" (near-equal? v123 (m* I v123)))
 (test "I2 * v123" (near-equal? v246 (m* I2 v123)))
 (test "scale1" (near-equal? #(2 8 18) (m* (scale I #(2 4 6)) v123)))
 (test "~scale1" (not (near-equal? #(2 8 17) (m* (scale I #(2 4 6)) v123))))
 (test "rotate1" (near-equal? #(0 -1 0) (m* (rotate I #(0 0 1) 90) #(1 0 0))))
 (test "rotate2" (near-equal? #(-1 0 0) (m* (rotate I #(0 0 1) 180) #(1 0 0))))
 (test "I * inv-translate" (near-equal? I (m* (translate I #(400 221 39)) (translate I #(-400 -221 -39)))))
 (test "I * inv-rotate" (near-equal? I (m* (rotate I #(1 0 0) π/2) (rotate I #(1 0 0) (- π/2)))))

 ; Test (orient d)
(let* ((v #(20 391 29))
       (m (orient I v))
       (w (m* m v)))
 (test "orient 1a" (near-equal? 0 (.x w)))
 (test "orient 1b" (near-equal? 0 (.y w))))

 ; Test (orient d)
(let* ((v #(0 13 0))
       (m (orient I v))
       (w (m* m v)))
 (test "orient 2a" (near-equal? 0 (.x w)))
 (test "orient 2b" (near-equal? 0 (.y w))))
 (test "orient 2c" (near-equal? 13 (.z w))))

)

(run-test "Vector math" test-vector-math)
(run-test "Matrix math" test-matrix-math)
