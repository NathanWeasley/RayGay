
TODO:
   
+ Get a Meshs triangles into hierarchy as separate nodes.
* Refactor Material to provide hookups for procedural textures
* More accurate Triangle-BoundingBox intersection code
* Hierarchy will never exit when more than 8 objects intersect a the same point.
* Implement onEdge() and inside() for Mesh class.
+ Adaptive supersampling til antialias
+ BSP
+ Cylinder 
+ Separate objectspace and worldspace transformations.
+ Area lights
+ Bumpmapping
* 3DS import (meshes, UV, materials)
+ gprof profiling
+ Create a XML scene format and an importer.
* Cone
+ Torus
* General polynomial surfaces.
* Support for separate night and day textures.
+ Mathematical cylinder
+ Bicubic interpolation of textures
+ Support for u,v coordinates in meshes
+ Distributed reflections aka gloss.
* Mathematical cone
* Heightmap objects
* Correct handling of camera placement, direction and field of view.
* Adaptive arealights
* Adaptive gloss
* Mathematical torus.


* Scaling of all objects: See http://www.cl.cam.ac.uk/Teaching/2000/AGraphHCI/SMEG/node2.html#SECTION00024000000000000000


// Compiling into assembler source
g++ <the load> -S -dA triangle.cpp

// Movie encoding

Mencoder:
http://www.mplayerhq.hu/DOCS/HTML/en/menc-feat-enc-images.html

Transcode:
http://www.theorie.physik.uni-goettingen.de/%7Eostreich/transcode/html/anim.html

$ find frames -type f > list
$ transcode -i list -x imlist,null -g 640x480 -y xvid,null -f 25 -o movie.avi -H 0

erstat evt. xvid med dixv5


