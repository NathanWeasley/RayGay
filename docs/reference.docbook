<?xml version="1.0" encoding="utf-8"?>   
<!--<!DOCTYPE article PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN' 'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd'> -->

<book>
  <bookinfo>
    <title>RayGay reference manual</title>
    <author><firstname>Jesper</firstname>
            <surname>Christensen</surname></author>
    <volumenum>1234</volumenum>
  </bookinfo>
  <preface id="preface">  
    <title>Title page</title>
    <figure id="cover-image">
      <title>Our EPUB cover image icon</title>
      <graphic fileref="cover.png"/>
    </figure>
  </preface>
  <chapter id="paths"> 
    <title>Paths</title>
    <para>
       Paths are a special category of objects in RayGay. A path can't be rendered directly, but it is useful for a few special purposes. A camera can be moved along a path or objects can be place along a path.
    </para>

    <section id="advanced_paths">
       <title>Advanced</title>
       <para>
       <synopsis>(make-path <parameter>position-function</parameter> <parameter>tangent-function</parameter> <parameter>closed?</parameter>)</synopsis>
       <synopsis>(make-path <parameter>position-function</parameter> <parameter>tangent-function</parameter>)</synopsis>
       <synopsis>(make-path <parameter>position-function</parameter>)</synopsis>
       </para>
       <para>These are constructors for generic parametrised paths. The <parameter>position-function</parameter> parameter should be a parametric function that takes one numeric parameter between 0 and 1 and returns the position of the path at that offset The <parameter>tangent-function</parameter>, if specified, should also be a one-parameter parametric function that returns the tangent vector of the path. The optional boolean <parameter>closed?</parameter> says whether the path is closed. If the optional parameters <parameter>tangent-function</parameter> and <parameter>closed?</parameter> are not supplied, they are deduced using the <parameter>position-function</parameter>.</para>
       <para>The following example creates a constructor for torus knot paths. See <link xlink:href="http://en.wikipedia.org/wiki/Torus_knot">Wikipedia</link>.</para>
       <programlisting>
(define (make-torus-knot-path p q)
 (make-path 
 (lambda (t) 
  (let* ((phi (* t 2 PI))
         (r (+ (cos (* q phi)) 2)))
   (vector (* r (cos (* p phi)))
           (* r (sin (* p phi)))
	   (sin (* q phi)))))))
       
       </programlisting>
       <figure id="torus-knot-image">
         <title>The torus knot rendered as a necklace of small spheres.</title>
	 <mediaobject>
	   <imageobject>
	     <imagedata fileref="examples/torus-knot.png"/>
	   </imageobject>
	   <textobject><phrase>A rendering of a torus knot.</phrase></textobject>
	 </mediaobject>
       </figure>
    </section>   
  </chapter>  
  <chapter id="objects"> 
    <title>Scene objects</title>
    <para>
      There are several categories of renderable objects that can be added to a scene. 
      Solid objects, collections of objects and meshes are examples.
    </para>
    <section id="solids">
       <title>Solids</title>
       <para>Solid objects are objects that can be used for constructive solid geometry.</para>
       <para>As solid objects can be constructed from other solid objects as boolean union, intersections and differences it is not necessary to specify the material on all these objects. Only the final object that is added to the scene must have a material assigned to it.
       </para>

       <section id="sphere" xreflabel="Sphere section">
       <title>Sphere</title>
       <indexterm><primary>Scene objects</primary><secondary>Sphere</secondary></indexterm>

       <para>
       <synopsis>(make-sphere <parameter>center</parameter> <parameter>radius</parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-sphere <parameter>center</parameter> <parameter>radius</parameter> )</synopsis>
       </para>
       <para>
       Makes a sphere.
       <parameter>center</parameter> is the center of the sphere as a 3D-vector.
       <parameter>radius</parameter> is a number specifying the radius of the sphere.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       <para>
       <code>(make-sphere #(1 2 3) 10.5 chrome)</code>
       </para>
       <para>
       Creates a sphere centered in (1,2,3) with a 10.5 radius and uses the material chrome. 
       </para>
       </section>
       
       <section id="ellipsoid">
       <title>Ellipsoid</title>

       <para>
       <synopsis>(make-ellipsoid <parameter>center</parameter> <parameter>radii</parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-ellipsoid <parameter>center</parameter> <parameter>radii</parameter> )</synopsis>
       </para>
       <para>
       Makes a ellipsoid which is like a sphere (See <xref linkend="sphere"/>) but with a different radius for each of the three axis'. Reversely is a sphere like an ellipsoid where the three radii are the same.
       <parameter>center</parameter> is a 3D-vector identifying the center of the ellipsoid.
       <parameter>radii</parameter> is 3D-vector specifying radius for each of the X,Y and Z axis' of the ellipsoid.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       <para>
       <code>(make-ellipsoid #(1 2 3) #(3 4 5) monkeybutter)</code>
       </para>
       <para>
       Creates a ellipsoid centered in (1,2,3) with a radius of 3 along the x-axis, a radius of 4 along the the y-axis and a radius of 5 along the z-axis. It uses a strange material named monkeybutter. 
       </para>
       <para>
       <code>(make-ellipsoid #(1 2 3) #(5 5 5) x-wing-black)</code>
       </para>
       <para>
       Creates a sphere centered in (1,2,3) with a radius of 5 and some material named x-wing-black. 
       </para>
       </section>

       <section id="cylinder">
       <title>Cylinder</title>
       <para>
       <synopsis>(make-cylinder <parameter>begin</parameter> <parameter>end</parameter> <parameter>radius</parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-cylinder <parameter>begin</parameter> <parameter>end</parameter> <parameter>radius</parameter>)</synopsis>
       Makes a cylinder.
       <parameter>begin</parameter> and <parameter>end</parameter> are 3D-vectors describing the center of the base plate and top plate respectively.
       <parameter>radius</parameter> is a number specifying the radius of the cylinder.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       </section>

       <section id="cone">
       <title>Cone</title>
       <tip>
           <para>A cone can simply be thought of as a cylinder with a different radius at each end.</para>
       </tip>
       <para>
       <synopsis>(make-cone <parameter>begin</parameter> <parameter>end</parameter> <parameter>radius<subscript>begin</subscript></parameter> <parameter>radius<subscript>end</subscript></parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-cone <parameter>begin</parameter> <parameter>end</parameter> <parameter>radius<subscript>begin</subscript></parameter> <parameter>radius<subscript>end</subscript></parameter>)</synopsis>
       Makes a cone.
       <parameter>begin</parameter> and <parameter>end</parameter> are 3D-vectors describing the center of the base plate and top plate respectively.
       <code>radius<subscript>begin</subscript></code> and <code>radius<subscript>end</subscript></code> are numbers specifying the radii of the base and top plates.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       </section>

       <section id="torus">
       <title>Torus</title>
       <para>
       <synopsis>(make-torus <parameter>big-radius</parameter> <parameter>small-radius</parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-torus <parameter>big-radius</parameter> <parameter>small-radius</parameter>)</synopsis>
       Makes a torus placed in the origin (0,0,0). A torus can be thought of as a small circle extruded along a bigger circle. The two parameters <parameter>big-radius</parameter> and <parameter>small-radius</parameter> are the radii of these two circles. The big circles lies centered in the x,z-plane.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       </section>

       <section id="solid-box">
       <title>Solid box</title>
       <para>
       <synopsis>(make-solid-box <parameter>corner<subscript>1</subscript></parameter> <parameter>corner<subscript>2</subscript></parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-solid-box <parameter>corner<subscript>1</subscript></parameter> <parameter>corner<subscript>2</subscript></parameter>)</synopsis>
       Makes a solid box. The two 3D-vectors <parameter>corner<subscript>1</subscript></parameter> and <parameter>corner<subscript>2</subscript></parameter> must be diagonally placed corners of the box.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       <para>
       <code>(make-solid-box #(-5 -5 -5) #(5 5 5))</code>
       </para>
       <para>
       Creates a cube centered in (0,0,0) with all sides having an area of 10&#215;10. 
       </para>
       </section>

       <section id="union">
       <title>Union</title>
       <para>A union of A and B is the all the space A and all the space B looked upon as one, even if it is not connected.</para>
       <para>
       <synopsis>(make-union <parameter>solid<subscript>1</subscript></parameter> <parameter>solid<subscript>2</subscript></parameter> ... <parameter>solid<subscript>n</subscript></parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-union <parameter>solid<subscript>1</subscript></parameter> <parameter>solid<subscript>2</subscript></parameter> ... <parameter>solid<subscript>n</subscript></parameter>)</synopsis>
       Makes a union of <parameter>solid<subscript>i</subscript></parameter> which all are solid objects. The resulting object is the spatial set resulting from the boolean union <parameter>solid<subscript>1</subscript></parameter> &#8746; <parameter>solid<subscript>2</subscript></parameter>  &#8746; ... &#8746; <parameter>solid<subscript>n</subscript></parameter>.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       </section>

       <section id="intersection">
       <title>Intersection</title>
       <para>An intersection of A and B is all the space A and B have in common.</para>
       <para>
       <synopsis>(make-intersection <parameter>solid<subscript>L</subscript></parameter> <parameter>solid<subscript>R</subscript></parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-intersection <parameter>solid<subscript>L</subscript></parameter> <parameter>solid<subscript>R</subscript></parameter>)</synopsis>
       Makes an intersection of the two solid objects <parameter>solid<subscript>L</subscript></parameter> and <parameter>solid<subscript>R</subscript></parameter>.
        The resulting object is the spatial set resulting from the boolean intersecion <parameter>solid<subscript>1</subscript></parameter> &#8745; <parameter>solid<subscript>2</subscript></parameter>.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       </section>

       <section id="difference">
       <title>Difference</title>
       <para>A difference A - B between two sets is whats left after all of B has been subtracted from A.</para>
       <para>
       <synopsis>(make-difference <parameter>solid<subscript>L</subscript></parameter> <parameter>solid<subscript>R</subscript></parameter> <parameter>material</parameter>)</synopsis>
       <synopsis>(make-difference <parameter>solid<subscript>L</subscript></parameter> <parameter>solid<subscript>R</subscript></parameter>)</synopsis>
       Makes a difference of the two solid objects <parameter>solid<subscript>L</subscript></parameter> and <parameter>solid<subscript>R</subscript></parameter>.
       The resulting object is the spatial set resulting from the boolean difference or relative complement <parameter>solid<subscript>1</subscript></parameter> - <parameter>solid<subscript>2</subscript></parameter> which also can be written as <parameter>solid<subscript>1</subscript></parameter> &#x2216; <parameter>solid<subscript>2</subscript></parameter>.
       The optional <parameter>material</parameter> sets the material of the object.
       </para>
       </section>

       </section>

    <section id="meshes">
       <title>Meshes</title>
       <para>Meshes are scene objects constructed from triangles. We distinguish them from solids as they can not be used in constructive solid geometry.</para>

       <section id="box">
       <title>Box</title>
       <para>
       <synopsis>(make-box <parameter>corner<subscript>1</subscript></parameter> <parameter>corner<subscript>2</subscript></parameter> <parameter>material</parameter>)</synopsis>
       Makes a box. Each side of the box is two triangles. These boxes render faster than solid boxes (See <xref linkend="solid-box"/>) but can not be used in constructive solid geometry.
       The two 3D-vectors <parameter>corner<subscript>1</subscript></parameter> and <parameter>corner<subscript>2</subscript></parameter> must be diagonally placed corners of the box.
       The <parameter>material</parameter> sets the material of the object.
       </para>
       </section>


       <section id="heightfield">
       <title>Heightfield</title>
       <para>
       <synopsis>(make-heightfield <parameter>heightmap</parameter> <parameter>size</parameter> <parameter>width-divisions</parameter> <parameter>depth-divisions</parameter> <parameter>material</parameter>)</synopsis>
       A heightfield is a mesh of triangles in a fixed grid or field in the x- and z-directions. The y-offsets are read from the supplied monochrome texture map. 
       <parameter>heightmap</parameter> is a monochrome texture map. 
       The 3D-vector <parameter>size</parameter> describes the width,height and depth of the heightmap.
       The two integers <parameter>width-divisions</parameter> and <parameter>depth-divisions</parameter> specify the numbers of subdivisions in the x and z directions. 
       The <parameter>material</parameter> parameter sets the material of the object.
       </para>
       </section>

       <section id="extrusion">
       <title>Extrusion</title>
       <para>
       <synopsis>(make-extrusion <parameter>path</parameter> <parameter>circle</parameter> <parameter>twists</parameter> <parameter>segments</parameter> <parameter>pieces</parameter> <parameter>material</parameter>)</synopsis>
       Pull the closed <parameter>circle</parameter> path (See <xref linkend="paths"/>) along the path <parameter>path</parameter> to create a tube. The extruded tube is constructed of triangles. There are <parameter>segments</parameter> segments along <parameter>path</parameter> and <parameter>pieces</parameter> triangle segments around <parameter>circle</parameter>. 
       The <parameter>circle</parameter> path should be a closed path lying in the x,y-plane. If the <parameter>circle</parameter> is asymmetrical around the origion (thus anything but a circle) the <parameter>twists</parameter> can be set to a non-zero integer value to let the circle-path be rotated <parameter>twists</parameter> times around the origin as it's extruded along <parameter>path</parameter>.
       The <parameter>material</parameter> parameter sets the material of the object.
       </para>
Lissajous knot
       <!-- TODO: Illustrate this with a Lissajous knot. 8_21 looks perfect. See http://en.wikipedia.org/wiki/Lissajous_knot -->
       <!-- TODO: A torus knot could be nice too. See http://en.wikipedia.org/wiki/Torus_knot -->
       </section>

    </section>
  </chapter>
  <chapter id="end-notes"> 
    <title>End notes</title>
    <para>
      This space intentionally left blank.
    </para>
  </chapter>
</book>

<!--
<html>
<head>
   <title>RayGay Scheme reference manual</title>
   <link rel="stylesheet" href="reference.css" type="text/css">
</head>
<body>
<h1>RayGay Scheme reference manual</h1>

<h2>Contents</h2>
<h3>Vector operations</h3>
<a href="#vdot">vdot</a>
<a href="#vcross">vcross</a>
<a href="#bounding-box">bounding-box</a>
<a href="#rotate">rotate</a>
<a href="#translate">translate</a>

<h3>Paths</h3>
<a href="#make-circle">make-circle</a>
<a href="#make-eclipse">make-eclipse</a>
<a href="#make-linesegment">make-linesegment</a>
<a href="#make-spiral">make-spiral</a>
<a href="#make-bezierspline">make-bezierspline</a>
<a href="#point-on-path">point-on-path</a>
<a href="#tangent-to-path">tangent-to-path</a>

<h3>Objects</h3>
<a href="#make-sphere">make-sphere</a>
<a href="#make-ellipsoid">make-ellipsoid</a>
<a href="#make-torus">make-torus</a>
<a href="#make-box">make-box</a>
<a href="#make-solid-box">make-solid-box</a>
<a href="#make-cylinder">make-cylinder</a>
<a href="#make-uncapped-cylinder">make-uncapped-cylinder</a>
<a href="#make-cone">make-cone</a>
<a href="#make-uncapped-cone">make-uncapped-cone</a>
<a href="#make-extrusion">make-extrusion</a>
<a href="#make-heightfield">make-heightfield</a>
<a href="#make-union">make-union</a>
<a href="#make-difference">make-difference</a>
<a href="#make-intersection">make-intersection</a>
<a href="#make-bezierpatch">make-bezierpatch</a>

<h2>Vector operations</h2>

<div class="function">
<a name="vdot">
<h3>vdot</h3>
<synopsis>(vdot <i>vector</i> <i>vector</i>) &rarr; <i>real</i></synopsis>
<pre>
</pre>
</div>

<div class="function">
<a name="vcross">
<h3>vcross</h3>
<synopsis>(vcross <i>vector</i> <i>vector</i>) &rarr; <i>vector</i></synopsis>
<pre>
</pre>
</div>

<div class="function">
<a name="bounding-box">
<h3>bounding-box</h3>
<synopsis>(bounding-box <i>object</i>:object ) &rarr; <i>(vector,vector)</i></synopsis>
<para>Returns two corners describing the axis-aligned boundingbox of the object.</para>
</div>

<div class="function">
<a name="rotate">
<h3>rotate</h3>
<synopsis>(rotate <i>vector</i>:vector <i>vector</i>:axis <i>real</i>:angle) &rarr; <i>vector</i></synopsis>
<synopsis>(rotate <i>object</i>:object <i>vector</i>:axis <i>real</i>:angle) &rarr; <i>object</i></synopsis>
<pre>
</pre>
</div>

<div class="function">
<a name="translate">
<h3>translate</h3>
<synopsis>(translate <i>vector</i> translation) &rarr; <i>vector</i></synopsis>
<synopsis>(translate <i>object</i> translation) &rarr; <i>object</i></synopsis>
<pre>
</pre>
</div>

<h2>Paths</h2>

<div class="function">
<a name="make-circle">	
<h3>make-circle</h3>
<synopsis>(make-circle <i>vector</i>:center <i>real</i>:radius <i>vector</i>:normal) &rarr; <i>path</i></synopsis>
<pre>
(make-circle '(0 0 0) 10 '(0 0 1))
</pre>
</div>

<div class="function">
<a name="make-ellipse">
<h3>make-ellipse</h3>
<synopsis>(make-ellipse <i>vector</i>:center <i>real</i>:radius<subscript>x</subscript> <i>real</i>:radius<subscript>y</subscript> <i>vector</i>:normal) &rarr; <i>path</i></synopsis>
<pre>
(make-ellipse '(0 0 0) 10 20 '(0 0 1))
</pre>
</div>

<div class="function">
<a name="make-linesegment">
<h3>make-linesegment</h3>
<synopsis>(make-linesegment <i>vector</i>:from <i>vector</i>:to) &rarr; <i>path</i></synopsis>
<pre>
</pre>
</div>

<div class="function">
<a name="make-spiral">
<h3>make-spiral</h3>
<synopsis>(make-spiral <i>path</i>:path radius windings offset) &rarr; <i>path</i></synopsis>
<pre>
</pre>
</div>

<div class="function">
<h3>make-bezierspline</h3>
<a name="make-bezierspline">
<synopsis>(make-bezierspline <i>vector</i>:point<subscript>1</subscript> ... <i>vector</i>:point<subscript>N</subscript>) &rarr; <i>path</i></synopsis>
<para>
<pre>
(make-bezierspline '((0 0 0) (10 10 10) (20 20 10)))
</pre>
</para>
</div>

<div class="function">
<a name="point-on-path">
<h3>point-on-path</h3>
<synopsis>(point-on-path <i>path</i>:path <i>real</i>:t) &rarr; vector</synopsis>
<pre>
</pre>
</div>

<div class="function">
<a name="tangent-to-path">
<h3>tangent-to-path</h3>
<synopsis>(tangent-to-path <i>path</i>:path <i>real</i>:t) &rarr; vector</synopsis>
<pre>
</pre>
</div>

<h2>Objects</h2>

<div class="function">
<a name="make-sphere">
<h3>make-sphere</h3>
<synopsis>(make-sphere <i>vector</i>:center <i>real</i>:radius <i>material</i>:material) &rarr; <i>object</i></synopsis>
<synopsis>(make-sphere <i>vector</i>:center <i>real</i>:radius) &rarr; <i>object</i></synopsis>
<pre>
</pre>
</div>

<div class="function">
<a name="make-ellipsoid">
<h3>make-ellipsoid</h3>
<synopsis>(make-ellipsoid <i>vector</i>:center <i>vector</i>:radii <i>material</i>:material) &rarr; <i>object</i></synopsis>
<synopsis>(make-ellipsoid <i>vector</i>:center <i>vector</i>:radii) &rarr; <i>object</i></synopsis>
<pre>
</pre>
</div>

<div class="function">
<h3>make-torus</h3>
<synopsis>(make-torus <i>real</i>:R <i>real</i>:r <i>material</i>:material) &rarr; <i>object</i></synopsis>
<synopsis>(make-torus <i>real</i>:R <i>real</i>:r) &rarr; <i>object</i></synopsis>
<para>Makes a torus placed in (0,0,0).</para>
<pre>
</pre>
</div>


<div class="function">
<h3>make-uncapped-cylinder</h3>
<synopsis>(make-uncapped-cylinder <i>vector</i>:begin <i>vector</i>:end <i>real</i>:radius <i>material</i>:material) &rarr; <i>object</i></synopsis>
<synopsis>(make-uncapped-cylinder <i>vector</i>:begin <i>vector</i>:end <i>real</i>:radius) &rarr; <i>object</i></synopsis>
<para>This is slightly faster than <tt>make-cylinder</tt> if the caps aren't needed.</para>
</div>


<div class="function">
<h3>make-uncapped-cone</h3>
<synopsis>(make-uncapped-cone <i>vector</i>:begin <i>vector</i>:end <i>real</i>:radius<subscript>begin</subscript> <i>real</i>:radius<subscript>end</subscript> <i>material</i>:material) &rarr; <i>object</i></synopsis>
<synopsis>(make-uncapped-cone <i>vector</i>:begin <i>vector</i>:end <i>real</i>:radius<subscript>begin</subscript> <i>real</i>:radius<subscript>end</subscript>) &rarr; <i>object</i></synopsis>
<para>This is slightly faster than <tt>make-cone</tt> if the caps aren't needed.</para>
</div>

<div class="function">
<h3>make-extrusion</h3>
<synopsis>(make-extrusion <i>path</i>:path <i>path</i>:circle <i>real</i>:twists <i>int</i>:segments <i>real</i>:twists <i>material</i>:material) &rarr; <i>object</i></synopsis>
</div>

<div class="function">
<h3>make-bezierpatch</h3>
<synopsis>(make-bezierpatch (<i>vector</i>:point<subscript>1</subscript> ... <i>vector</i>:point<subscript>16</subscript>) <i>int</i>:resolution<subscript>x</subscript> <i>int</i>:resolution<subscript>y</subscript> <i>material</i>:material) &rarr; <i>object</i></synopsis>
<para>Makes a mesh of 2 &times; resolution<subscript>x</subscript> &times; resolution<subscript>y</subscript> triangles.</para>
</div>

<h2>Lightsources</h2>

<div class="function">
<h3>make-skylight</h3>
<synopsis>(make-skylight <i>real</i>:radius <i>int</i>:num [<i>vector</i>:power]) &rarr; <i>object</i></synopsis>
<para>Makes a skylight with <i>num</i> pointlights uniformly placed on a hemisphere of radius <i>radius</i>.</para>
<para><pre>
(make-skylight 10000 20)
</pre></para>
</div>

<div class="function">
<h3>make-arealight</h3>
<synopsis>(make-arealight <i>vector</i>:position <i>vector</i>:direction <i>real</i>:radius <i>int</i>:num <i>real</i>:jitter  [<i>vector</i>:power]) &rarr; <i>object</i></synopsis>
<para>Makes an arealight with <i>num</i> pointlights uniformly (jittering) placed on a disc of radius <i>radius</i> with normal <i>direction</i>.</para>
<para><pre>
(make-arealight #(1000 2000 2000) #(-0.5 -1 -1) 500 100 0.1)
</pre></para>
</div>


<h2>Materials</h2>

<h2>Scheme cheatsheet</h2>

<h3>Iteration with <tt>do</tt></h3>

<pre>
(do ((x 0 (+ x 1)))
  ((= x 10) x)
    (display x)
    (newline))

(do ((var1 init1 step1)...)
    (test expr ...)
   command ...)
</pre>
The init expressions are assigned to the vars. Each iteration begins by
evaluating test. 

If the result is false the commands are run, then the steps evaluated and assigned to the vars and then the next iteration begins. If the result is true the exprs are evaluated and the last one is returned as the value of the do-expression.

A step can the omitted. The init then works as a simple assignment of local vars.

The example prints the numbers 0 to 10 and returns x which has the value 10.
<hr>
$Id$ Jesper Christensen, 2006.


</body>
</html>
-->
